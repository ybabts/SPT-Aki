import { IPmcData } from "../../../models/eft/common/IPmcData.d.ts";
import { IInventoryBindRequestData } from "../../../models/eft/inventory/IInventoryBindRequestData.d.ts";
import { IInventoryCreateMarkerRequestData } from "../../../models/eft/inventory/IInventoryCreateMarkerRequestData.d.ts";
import { IInventoryDeleteMarkerRequestData } from "../../../models/eft/inventory/IInventoryDeleteMarkerRequestData.d.ts";
import { IInventoryEditMarkerRequestData } from "../../../models/eft/inventory/IInventoryEditMarkerRequestData.d.ts";
import { IInventoryExamineRequestData } from "../../../models/eft/inventory/IInventoryExamineRequestData.d.ts";
import { IInventoryFoldRequestData } from "../../../models/eft/inventory/IInventoryFoldRequestData.d.ts";
import { IInventoryMergeRequestData } from "../../../models/eft/inventory/IInventoryMergeRequestData.d.ts";
import { IInventoryMoveRequestData } from "../../../models/eft/inventory/IInventoryMoveRequestData.d.ts";
import { IInventoryReadEncyclopediaRequestData } from "../../../models/eft/inventory/IInventoryReadEncyclopediaRequestData.d.ts";
import { IInventoryRemoveRequestData } from "../../../models/eft/inventory/IInventoryRemoveRequestData.d.ts";
import { IInventorySortRequestData } from "../../../models/eft/inventory/IInventorySortRequestData.d.ts";
import { IInventorySplitRequestData } from "../../../models/eft/inventory/IInventorySplitRequestData.d.ts";
import { IInventorySwapRequestData } from "../../../models/eft/inventory/IInventorySwapRequestData.d.ts";
import { IInventoryTagRequestData } from "../../../models/eft/inventory/IInventoryTagRequestData.d.ts";
import { IInventoryToggleRequestData } from "../../../models/eft/inventory/IInventoryToggleRequestData.d.ts";
import { IInventoryTransferRequestData } from "../../../models/eft/inventory/IInventoryTransferRequestData.d.ts";
import { IItemEventRouterResponse } from "../../../models/eft/itemEvent/IItemEventRouterResponse.d.ts";
export interface IInventoryCallbacks {
    moveItem(pmcData: IPmcData, body: IInventoryMoveRequestData, sessionID: string): IItemEventRouterResponse;
    removeItem(pmcData: IPmcData, body: IInventoryRemoveRequestData, sessionID: string): IItemEventRouterResponse;
    splitItem(pmcData: IPmcData, body: IInventorySplitRequestData, sessionID: string): IItemEventRouterResponse;
    mergeItem(pmcData: IPmcData, body: IInventoryMergeRequestData, sessionID: string): IItemEventRouterResponse;
    transferItem(pmcData: IPmcData, body: IInventoryTransferRequestData, sessionID: string): IItemEventRouterResponse;
    swapItem(pmcData: IPmcData, body: IInventorySwapRequestData, sessionID: string): IItemEventRouterResponse;
    foldItem(pmcData: IPmcData, body: IInventoryFoldRequestData, sessionID: string): IItemEventRouterResponse;
    toggleItem(pmcData: IPmcData, body: IInventoryToggleRequestData, sessionID: string): IItemEventRouterResponse;
    tagItem(pmcData: IPmcData, body: IInventoryTagRequestData, sessionID: string): IItemEventRouterResponse;
    bindItem(pmcData: IPmcData, body: IInventoryBindRequestData, sessionID: string): IItemEventRouterResponse;
    examineItem(pmcData: IPmcData, body: IInventoryExamineRequestData, sessionID: string): IItemEventRouterResponse;
    readEncyclopedia(pmcData: IPmcData, body: IInventoryReadEncyclopediaRequestData, sessionID: string): IItemEventRouterResponse;
    sortInventory(pmcData: IPmcData, body: IInventorySortRequestData, sessionID: string): IItemEventRouterResponse;
    createMapMarker(pmcData: IPmcData, body: IInventoryCreateMarkerRequestData, sessionID: string): IItemEventRouterResponse;
    deleteMapMarker(pmcData: IPmcData, body: IInventoryDeleteMarkerRequestData, sessionID: string): IItemEventRouterResponse;
    editMapMarker(pmcData: IPmcData, body: IInventoryEditMarkerRequestData, sessionID: string): IItemEventRouterResponse;
}
